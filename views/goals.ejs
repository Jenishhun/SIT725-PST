<div class="row">
  <div class="col s12">
    <h3 class="page-title">Financial Goals</h3>
  </div>
</div>

<!-- Filter Section -->
<div class="row">
  <div class="col s12 filter-section">
    <div class="row mb-0">
      <div class="input-field col s12 m4">
        <i class="material-icons prefix">search</i>
        <input id="goal-filter" type="text" placeholder="Filter goals...">
      </div>
      
      <div class="input-field col s12 m4">
        <select id="type-filter">
          <option value="">All Types</option>
          <option value="income">Income</option>
          <option value="expense">Expense</option>
        </select>
        <label>Filter by Type</label>
      </div>
      
      <div class="input-field col s12 m4">
        <select id="period-filter">
          <option value="">All Periods</option>
          <option value="daily">Daily</option>
          <option value="weekly">Weekly</option>
          <option value="monthly">Monthly</option>
          <option value="yearly">Yearly</option>
        </select>
        <label>Filter by Period</label>
      </div>
    </div>
  </div>
</div>

<!-- Add Goal Button -->
<div class="row">
  <div class="col s12">
    <a class="btn waves-effect waves-light modal-trigger" href="#add-goal-modal">
      <i class="material-icons left">add</i>Add Goal
    </a>
  </div>
</div>

<!-- Goals Table -->
<div class="row">
  <div class="col s12">
    <div class="data-table">
      <table class="striped responsive-table goal-table">
        <thead>
          <tr>
            <th>Type</th>
            <th>Amount</th>
            <th>Period</th>
            <th>Left</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% goals.forEach(goal => { %>
            <tr class="goal-row" data-id="<%= goal._id %>" data-type="<%= goal.type %>" data-amount="<%= goal.amount %>" data-period="<%= goal.period %>" data-left="<%= goal.amountLeft %>" data-active="<%= goal.isActive %>">
              <td>
                <% if(goal.type === 'income') { %>
                  <span class="green-text"><i class="material-icons left">trending_up</i>Income</span>
                <% } else { %>
                  <span class="red-text"><i class="material-icons left">trending_down</i>Expense</span>
                <% } %>
              </td>
              <td>$<%= goal.amount.toFixed(2) %></td>
              <td><%= goal.period.charAt(0).toUpperCase() + goal.period.slice(1) %></td>
              <td>$<%= goal.amountLeft.toFixed(2) %></td>
              <td>
                <% if(goal.isActive) { %>
                  <span class="green-text">Achieved</span>
                <% } else { %>
                  <span class="orange-text">In Progress</span>
                <% } %>
              </td>
              <td class="action-icons">
                <a href="#" class="edit-goal modal-trigger" data-target="edit-goal-modal" data-id="<%= goal._id %>" data-type="<%= goal.type %>" data-amount="<%= goal.amount %>" data-period="<%= goal.period %>">
                  <i class="material-icons">edit</i>
                </a>
                <a href="#delete-goal-modal" class="modal-trigger delete-goal" data-id="<%= goal._id %>">
                  <i class="material-icons">delete</i>
                </a>
              </td>
            </tr>
            <tr class="goal-detail-row" id="goal-detail-<%= goal._id %>">
              <td colspan="6" class="goal-detail">
                <div class="row">
                  <div class="col s12 m6">
                    <h5>Goal Progress</h5>
                    <div class="progress-chart-container">
                      <canvas id="progress-chart-<%= goal._id %>"></canvas>
                    </div>
                  </div>
                  <div class="col s12 m6">
                    <h5>Details</h5>
                    <p><strong>Type:</strong> <%= goal.type.charAt(0).toUpperCase() + goal.type.slice(1) %></p>
                    <p><strong>Target Amount:</strong> $<%= goal.amount.toFixed(2) %></p>
                    <p><strong>Period:</strong> <%= goal.period.charAt(0).toUpperCase() + goal.period.slice(1) %></p>
                    <p><strong>Amount Left:</strong> $<%= goal.amountLeft.toFixed(2) %></p>
                    <p><strong>Progress:</strong> <%= Math.round(((goal.amount - goal.amountLeft) / goal.amount) * 100) %>%</p>
                  </div>
                </div>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </div>
</div>

<!-- Add Goal Modal -->
<div id="add-goal-modal" class="modal">
  <div class="modal-content">
    <h4 class="modal-title">Add New Goal</h4>
    
    <% if (typeof error !== 'undefined' && error) { %>
      <div class="card-panel red lighten-2 white-text"><%= error %></div>
    <% } %>
    
    <form action="/goals" method="POST">
      <div class="row">
        <div class="input-field col s12 m4">
          <i class="material-icons prefix">category</i>
          <select name="type" required>
            <option value="" disabled selected>Type</option>
            <option value="income">Income</option>
            <option value="expense">Expense</option>
          </select>
          <label>Type</label>
        </div>
        
        <div class="input-field col s12 m4">
          <i class="material-icons prefix">attach_money</i>
          <input type="number" name="amount" step="0.01" required>
          <label>Goal Amount</label>
        </div>
        
        <div class="input-field col s12 m4">
          <i class="material-icons prefix">date_range</i>
          <select name="period" required>
            <option value="" disabled selected>Period</option>
            <option value="daily">Daily</option>
            <option value="weekly">Weekly</option>
            <option value="monthly">Monthly</option>
            <option value="yearly">Yearly</option>
          </select>
          <label>Period</label>
        </div>
      </div>
      
      <div class="modal-footer">
        <a href="#!" class="modal-close waves-effect waves-light btn-flat">Cancel</a>
        <button type="submit" class="waves-effect waves-light btn">
          <i class="material-icons left">save</i>Save
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Edit Goal Modal -->
<div id="edit-goal-modal" class="modal">
  <div class="modal-content">
    <h4 class="modal-title">Edit Goal</h4>
    
    <form id="edit-goal-form" action="/goals/edit/" method="POST">
      <div class="row">
        <div class="input-field col s12 m4">
          <i class="material-icons prefix">category</i>
          <select id="edit-type" name="type" required>
            <option value="" disabled>Type</option>
            <option value="income">Income</option>
            <option value="expense">Expense</option>
          </select>
          <label>Type</label>
        </div>
        
        <div class="input-field col s12 m4">
          <i class="material-icons prefix">attach_money</i>
          <input id="edit-amount" type="number" name="amount" step="0.01" required>
          <label for="edit-amount">Goal Amount</label>
        </div>
        
        <div class="input-field col s12 m4">
          <i class="material-icons prefix">date_range</i>
          <select id="edit-period" name="period" required>
            <option value="" disabled>Period</option>
            <option value="daily">Daily</option>
            <option value="weekly">Weekly</option>
            <option value="monthly">Monthly</option>
            <option value="yearly">Yearly</option>
          </select>
          <label>Period</label>
        </div>
      </div>
      
      <div class="modal-footer">
        <a href="#!" class="modal-close waves-effect waves-light btn-flat">Cancel</a>
        <button type="submit" class="waves-effect waves-light btn">
          <i class="material-icons left">save</i>Update
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Delete Goal Modal -->
<div id="delete-goal-modal" class="modal">
  <div class="modal-content">
    <h4 class="modal-title">Confirm Delete</h4>
    <p>Are you sure you want to delete this goal? This action cannot be undone.</p>
  </div>
  <div class="modal-footer">
    <a href="#!" class="modal-close waves-effect waves-light btn-flat">Cancel</a>
    <form id="delete-goal-form" action="/goals/delete/" method="POST" style="display: inline;">
      <button type="submit" class="waves-effect waves-light btn red">
        <i class="material-icons left">delete</i>Delete
      </button>
    </form>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Materialize components
    M.Modal.init(document.querySelectorAll('.modal'));
    M.FormSelect.init(document.querySelectorAll('select'));
    
    // Handle goal row click to show/hide details
    const goalRows = document.querySelectorAll('.goal-row');
    goalRows.forEach(row => {
      row.addEventListener('click', function(e) {
        // Don't toggle if clicking on action buttons
        if (e.target.closest('.action-icons')) return;
        
        const goalId = this.getAttribute('data-id');
        const detailRow = document.getElementById(`goal-detail-${goalId}`);
        const detailSection = detailRow.querySelector('.goal-detail');
        
        // Toggle active class on the row
        this.classList.toggle('active');
        
        // Toggle the detail section
        if (detailSection.classList.contains('active')) {
          detailSection.classList.remove('active');
        } else {
          // Close any other open details
          document.querySelectorAll('.goal-detail.active').forEach(detail => {
            detail.classList.remove('active');
          });
          
          detailSection.classList.add('active');
          
          // Initialize the progress chart
          initializeProgressChart(goalId);
        }
      });
    });
    
    // Handle edit goal
    const editButtons = document.querySelectorAll('.edit-goal');
    const editForm = document.getElementById('edit-goal-form');
    
    editButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        
        const id = this.getAttribute('data-id');
        const type = this.getAttribute('data-type');
        const amount = this.getAttribute('data-amount');
        const period = this.getAttribute('data-period');
        
        // Update form action
        editForm.action = `/goals/edit/${id}`;
        
        // Set form values
        document.getElementById('edit-amount').value = amount;
        
        // Set select values and update Materialize
        const typeSelect = document.getElementById('edit-type');
        const periodSelect = document.getElementById('edit-period');
        
        // Set the values
        typeSelect.value = type;
        periodSelect.value = period;
        
        // Update Materialize selects
        M.FormSelect.init(typeSelect);
        M.FormSelect.init(periodSelect);
        
        // Update labels to active state
        M.updateTextFields();
        
        // Open modal
        const modal = document.getElementById('edit-goal-modal');
        const instance = M.Modal.getInstance(modal);
        instance.open();
      });
    });
    
    // Handle delete goal
    const deleteButtons = document.querySelectorAll('.delete-goal');
    const deleteForm = document.getElementById('delete-goal-form');
    
    deleteButtons.forEach(button => {
      button.addEventListener('click', function() {
        const id = this.getAttribute('data-id');
        deleteForm.action = `/goals/delete/${id}`;
      });
    });
    
    // Handle goal filtering
    const goalFilter = document.getElementById('goal-filter');
    const typeFilter = document.getElementById('type-filter');
    const periodFilter = document.getElementById('period-filter');
    
    function filterGoals() {
      const filterText = goalFilter.value.toLowerCase();
      const filterType = typeFilter.value;
      const filterPeriod = periodFilter.value;
      
      goalRows.forEach(row => {
        const type = row.getAttribute('data-type');
        const period = row.getAttribute('data-period');
        const text = row.textContent.toLowerCase();
        
        let showRow = true;
        
        // Text filter
        if (filterText && !text.includes(filterText)) {
          showRow = false;
        }
        
        // Type filter
        if (filterType && type !== filterType) {
          showRow = false;
        }
        
        // Period filter
        if (filterPeriod && period !== filterPeriod) {
          showRow = false;
        }
        
        // Show/hide the row and its detail row
        const detailRow = document.getElementById(`goal-detail-${row.getAttribute('data-id')}`);
        
        if (showRow) {
          row.style.display = '';
          if (detailRow) detailRow.style.display = '';
        } else {
          row.style.display = 'none';
          if (detailRow) detailRow.style.display = 'none';
        }
      });
    }
    
    if (goalFilter) goalFilter.addEventListener('input', filterGoals);
    if (typeFilter) typeFilter.addEventListener('change', filterGoals);
    if (periodFilter) periodFilter.addEventListener('change', filterGoals);
  });
  
  function initializeProgressChart(goalId) {
    const row = document.querySelector(`.goal-row[data-id="${goalId}"]`);
    const amount = parseFloat(row.getAttribute('data-amount'));
    const amountLeft = parseFloat(row.getAttribute('data-left'));
    const achieved = amount - amountLeft;
    const percentage = Math.round((achieved / amount) * 100);
    
    const canvas = document.getElementById(`progress-chart-${goalId}`);
    
    // Check if chart already exists
    if (canvas.chart) {
      canvas.chart.destroy();
    }
    
    // Create the chart
    canvas.chart = new Chart(canvas.getContext('2d'), {
      type: 'doughnut',
      data: {
        labels: ['Achieved', 'Remaining'],
        datasets: [{
          data: [achieved, amountLeft],
          backgroundColor: [
            'rgba(76, 175, 80, 0.7)',
            'rgba(189, 189, 189, 0.7)'
          ],
          borderColor: [
            'rgb(76, 175, 80)',
            'rgb(189, 189, 189)'
          ],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        cutout: '70%',
        plugins: {
          legend: {
            position: 'bottom',
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                const label = context.label || '';
                const value = context.raw || 0;
                return `${label}: $${value.toFixed(2)} (${Math.round((value / amount) * 100)}%)`;
              }
            }
          }
        }
      }
    });
    
    // Add center text plugin if it doesn't exist
    if (!Chart.registry.getPlugin('doughnutCenterText')) {
      Chart.register({
        id: 'doughnutCenterText',
        beforeDraw: function(chart) {
          if (chart.config.type === 'doughnut') {
            // Get ctx from chart
            const ctx = chart.ctx;
            
            // Get options from the center object in options
            const centerConfig = chart.options.centerText || {};
            const fontStyle = centerConfig.fontStyle || 'Arial';
            const txt = centerConfig.text || `${percentage}%`;
            const color = centerConfig.color || '#000';
            const fontSize = centerConfig.fontSize || 30;
            
            // Set center text
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.font = `${fontSize}px ${fontStyle}`;
            ctx.fillStyle = color;
            
            // Get the center point
            const centerX = (chart.chartArea.left + chart.chartArea.right) / 2;
            const centerY = (chart.chartArea.top + chart.chartArea.bottom) / 2;
            
            // Draw text in center
            ctx.fillText(txt, centerX, centerY);
          }
        }
      });
    }
    
    // Add center text configuration
    canvas.chart.options.centerText = {
      text: `${percentage}%`,
      color: '#26a69a',
      fontSize: 24
    };
    
    // Update the chart
    canvas.chart.update();
  }
</script>
